openapi: 3.0.3
info: 
  title: MTG Deck Builder API
  description: API RESTful para gerenciamento de decks e cartas de Magic The Gathering.
  version: "1.0.0"

servers:
  - url: http://localhost:8080
    description: Servidor local

paths:
  /decks:
    get:
      summary: Listar todos os decks
      responses:
        '200':
          description: OK
        '500':
          description: Erro interno do servidor
    post:
      summary: Criar um novo deck
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeckDTO'
      responses:
        '201':
          description: Deck criado com sucesso
        '400':
          description: Erro de validação
        '500':
          description: Erro interno do servidor

  /decks/{id}:
    get:
      summary: Buscar deck por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Deck não encontrado
        '500':
          description: Erro interno do servidor
    put:
      summary: Atualizar um deck existente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeckDTO'
      responses:
        '200':
          description: Atualizado com sucesso
        '400':
          description: Erro de validação
        '404':
          description: Deck não encontrado
        '500':
          description: Erro interno do servidor
    delete:
      summary: Deletar um deck
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Excluído com sucesso
        '404':
          description: Deck não encontrado
        '500':
          description: Erro interno do servidor

  /cartas:
    get:
      summary: Listar todas as cartas
      responses:
        '200':
          description: OK
        '500':
          description: Erro interno do servidor
    post:
      summary: Criar uma nova carta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartaDTO'
      responses:
        '201':
          description: Criado com sucesso
        '400':
          description: Erro de validação
        '500':
          description: Erro interno do servidor

  /cartas/{id}:
    get:
      summary: Buscar carta por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Carta não encontrada
        '500':
          description: Erro interno do servidor
    put:
      summary: Atualizar uma carta
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartaDTO'
      responses:
        '200':
          description: Atualizado com sucesso
        '400':
          description: Erro de validação
        '404':
          description: Carta não encontrada
        '500':
          description: Erro interno do servidor
    delete:
      summary: Deletar uma carta
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Excluído com sucesso
        '404':
          description: Carta não encontrada
        '500':
          description: Erro interno do servidor

  /decks/{deckId}/cartas:
    get:
      summary: Listar cartas de um deck
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Deck não encontrado
        '500':
          description: Erro interno do servidor
    post:
      summary: Adicionar carta a um deck
      parameters:
        - name: deckId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartaDTO'
      responses:
        '201':
          description: Carta adicionada
        '400':
          description: Erro de validação
        '500':
          description: Erro interno do servidor

  /usuarios:
    get:
      summary: Listar todos os usuários
      responses:
        '200':
          description: OK
        '500':
          description: Erro interno do servidor
    post:
      summary: Criar um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioDTO'
      responses:
        '201':
          description: Usuário criado
        '400':
          description: Erro de validação
        '500':
          description: Erro interno do servidor

  /usuarios/{id}:
    get:
      summary: Buscar usuário por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno do servidor
    put:
      summary: Atualizar um usuário
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioDTO'
      responses:
        '200':
          description: Atualizado
        '400':
          description: Erro de validação
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno do servidor
    delete:
      summary: Deletar um usuário
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Excluído
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno do servidor

  /usuarios/{id}/decks:
    get:
      summary: Listar decks de um usuário
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno do servidor

components:
  schemas:
    DeckDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        descricao:
          type: string
        formato:
          type: string
        cartas:
          type: array
          items:
            $ref: '#/components/schemas/CartaDTO'
        usuarioId:
          type: integer
        dataCriacao:
          type: string
          format: date-time

    CartaDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        tipo:
          type: string
        cor:
          type: string
        custoMana:
          type: string
        quantidade:
          type: integer
        descricao:
          type: string

    UsuarioDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        email:
          type: string
        senha:
          type: string
        dataCriacao:
          type: string
          format: date-time
